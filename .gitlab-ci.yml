stages:
  - build
  - analyze

.install-dependencies:
  before_script:
    - test "${CI_BUILD_IMAGE%:*}" = "alpine" && apk add clang curl gcc meson musl-dev wayland-protocols wlroots-dev
    - test "${CI_BUILD_IMAGE%:*}" = "archlinux" && pacman -Syu --noconfirm clang curl gcc meson perl pkg-config wayland-protocols wlroots
    - test "${CI_BUILD_IMAGE%:*}" = "ubuntu" && apt update && DEBIAN_FRONTEND=noninteractive apt install -y gcc clang curl meson pkg-config libwlroots-dev

build:
  extends: .install-dependencies
  stage: build
  image: ${IMAGE}
  script:
    - meson setup build . --warnlevel 3 --werror
    - ninja -C build all
  parallel:
    matrix:
      - CC: [ "clang", "gcc" ]
        IMAGE: [ "alpine:latest", "archlinux:latest", "ubuntu:21.10" ]

clang-analyzer:
  extends: .install-dependencies
  stage: analyze
  image: archlinux:latest
  script:
    - meson setup build .
    - scan-build --status-bugs ninja -C build all

coverity:
  extends: .install-dependencies
  stage: analyze
  image: ubuntu:21.10
  script:
    - curl https://scan.coverity.com/download/linux64 --form project=$COVERITY_PROJECT --form token=$COVERITY_TOKEN | tar xz
    - meson setup build . --warnlevel 3 --werror
    - cov-analysis-linux64-*/bin/cov-build --dir cov-int ninja -C build all
    - tar czf cov-int.tar.gz cov-int
    - curl https://scan.coverity.com/builds?project=$COVERITY_PROJECT --form token=$COVERITY_TOKEN --form email=$GITLAB_USER_EMAIL --form file=@cov-int.tar.gz --form version=$CI_COMMIT_SHA --form description="$CI_COMMIT_SHA / $CI_COMMIT_TITLE / $CI_COMMIT_REF_NAME:$CI_PIPELINE_ID"
  artifacts:
    paths:
      - cov-int.tar.gz
  only:
    refs:
      - main
