.TH TIMBER "1" "" "timber @version@" "timber manual"
.SH NAME
timber \- tree-based window manager
.SH SYNOPSIS
.sp
.nf
\fItimber\fR [--help] [<args>]
\fItimber\fR run
\fItimber\fR client focus (next|prev)
\fItimber\fR client fullscreen
\fItimber\fR client kill
\fItimber\fR client resize (north|south|east|west) <NUMBER>
\fItimber\fR client swap (next|prev)
\fItimber\fR client to_desktop (next|prev)
\fItimber\fR client to_screen (next|prev)
\fItimber\fR desktop focus (next|prev)
\fItimber\fR desktop kill
\fItimber\fR desktop new
\fItimber\fR desktop swap (next|prev)
\fItimber\fR screen focus (next|prev)
\fItimber\fR screen scale <SCREEN> <NUMBER>
\fItimber\fR screen mode <SCREEN> <WIDTH>x<HEIGHT>x<REFRESH>
\fItimber\fR tree rotate
\fItimber\fR state subscribe
\fItimber\fR state query
\fItimber\fR state quit
\fItimber\fR binding add <KEY> <COMMAND>
.fi
.SH DESCRIPTION
.sp
\fBtimber\fR is a tree-based compositor for Wayland inspired by bspwm.
.SH TERMS
.SS Client
.sp
A client can be thought of as a window which can be displayed and which can receive input events.
Examples are terminals, browsers or music players.
Some windows are created in such a way that they are ignored by the window manager, for example popups or status bars.
These windows are not considered to be a client.
.SS Tree
.sp
All clients are managed in a binary tree.
Each node of that tree may have a parent node and either zero or two children.
In case where a node doesn't have any children, it is called a leaf node and will hold a client.
In case where a node has two children, it may not hold a client but each of its children may again either be an edge node or another splitting node.
.PP
The tree's nodes determine how clients shall be layed out on the screen and thus hold an orientation as well as a weight.
If a node has horizontal orientation, its children will be displayed stacked above each other.
If a node has vertical orientation, its children will be displayed stacked next to each other.
How much space is being allocated to both children is determined by the weight, which is a value in the range \[0, 100\].
If the value is smaller than 50, then the first client will be displayed smaller than the second client.
.SS Desktop
.sp
A desktop is a virtual entity that may contain an arbitrary amount of clients.
Each desktop will manage its clients independently of other desktops and layout them accordingly.
Each screen will have at least one desktop and exactly one desktop can be selected on each screen.
Switching between desktops on a screen will cause it to only display clients from the desktop that is being switched to.
.SS Screen
.sp
A screen represents a monitor attached to your graphics card.
Each monitor has its own screen that may hold one or more desktops.
.SH OPTIONS
.SS --help
.sp
Print the list of available commands.
.SH COMMANDS
.SS Window manager
.sp
$ timber run
.sp
Start the Wayland compositor.
By default, it will create a new Wayland display "wayland-$n" inside the \fBXDG_RUNTIME_DIR\fR with a control socket "wayland-$n.s".
If the \fBTMBR_CONFIG_PATH\fR environment variable is set to a script, it will be executed after the compositor has initialized.
.SS Client: focus neighbouring client
.sp
$ timber client focus (next|prev)
.sp
Selects the client relative to the currently focussed client and makes it the new focussed node.
.SS Client: toggle fullscreen mode
.sp
$ timber client fullscreen
.sp
Toggles the fullscreen state of the currently focussed client.
.SS Client: kill focussed client
.sp
$ timber client kill
.sp
Kills the currently focussed client.
Sends it a message to signal that it shall close itself, but will not forcefully close its window.
.SS Client: adjust size
.sp
$ timber client resize (north|south|east|west) <NUMBER>
.sp
Adjust size of the currently focussed client.
Resizes the given edge of the client by the amount passed.
The amount shall be a number from \[-100, +100\] and signal a percentage.
Negative values will shrink the client's size, positive values will grow the client's size.
.SS Client: swap with neighbouring client
.sp
$ timber client swap (next|prev)
.sp
Swaps the currently focussed client with the selected neighbouring client.
The current and selected client's windows will be swapped with each other.
.SS Client: move to neighbouring desktop
.sp
$ timber client to_desktop (next|prev)
.sp
Sends the currently focussed client to the selected neighbouring desktop.
.SS Client: Move to neighbouring screen
.sp
$ timber client to_screen (next|prev)
.sp
Sends the currently focussed client to the selected neighbouring screen.
.SS Desktop: focus neighbouring desktop
.sp
$ timber desktop focus (next|prev)
.sp
Selects the desktop relative to the currently focussed desktop and makes it the new focussed one.
.SS Desktop: kill focussed desktop
.sp
$ timber desktop kill
.sp
Removes the currently focussed desktop if the desktop has no clients attached to it.
.SS Desktop: create new desktop
.sp
$ timber desktop new
.sp
Creates a new desktop.
The newly created desktop will automatically be focussed and not own any clients yet.
.SS Desktop: swap with neighbouring desktop
.sp
$ timber desktop swap (next|prev)
.sp
Swaps the currently focussed desktop with the selected neighbouring desktop.
The current desktop will stay focussed, but the order of those two desktops will be swapped.
.SS Screen: focus neighbouring screen
.sp
$ timber screen focus (next|prev)
.sp
Selects the screen relative to the currently focussed screen and makes it the new focussed one.
.SS Screen: set scale
.sp
$ timber screen scale <SCREEN> <NUMBER>
.sp
Sets the scale of the screen to the given percentage.
The default scale is 100.
.SS Screen: set mode
.sp
$ timber screen mode <SCREEN> <WIDTH>x<HEIGHT>@<REFRESH>
.sp
Sets the mode of the screen to the given width, height and refresh rate.
.SS Tree: rotate current node
.sp
$ timber tree rotate
.sp
Rotates the tree node that holds the currently selected client.
If the previous orientation was a vertical split of the two clients contained by the current node, it will set it to horizontal instead and vice versa.
.SS State: subscribe to notifications
.sp
$ timber state subscribe
.sp
Subscribe to notifications.
The client will not exit, but instead receive event notifications in YAML format.
.SS State: query current state
.sp
$ timber state query
.sp
Query current state of the window manager.
The output is in YAML format.
.SS State: quit the window manager
.sp
$ timber state quit
.sp
Gracefully stops the window manager.
.SS Binding: add a new binding
.sp
$ timber binding add <KEY> <COMMAND>
.sp
Add new binding for a key combination.
The key can be a combination of multiple keys recognized by xkbcommon, e.g. "ctrl+alt+a".
If the given key combination is pressed, the associated command will be invoked via the system's shell.
.SH ENVIRONMENT VARIABLES
The following environment variables can be set to modify behaviour of timber:
.SS XCURSOR_PATH
A colon-delimited list of directories containing cursor themes.
.SS XCURSOR_THEME
.sp
The theme to use for the cursor.
.SH AUTHOR
.sp
Patrick Steinhardt <ps at pks.im>
